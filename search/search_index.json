{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#silencewiki","title":"silence\u7684wiki","text":""},{"location":"pintos/pintos%20lab2%20record/","title":"Pintos lab2 record","text":"<p>\u9996\u5148\u5728lab1\u7684\u57fa\u7840\u4e0a\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898,\u5177\u4f53\u4f53\u73b0\u5728 \u95ee\u9898\u51fa\u5904 </p> <p>\u53ef\u4ee5\u9009\u62e9\u5305\u88c5\u4e00\u6b21<code>thread_yield</code>\u8c03\u7528  </p> <pre><code>void thread_try_yield(void) {\n  if (!list_empty(&amp;ready_list) &amp;&amp; thread_current() != idle_thread)\n    thread_yield();\n}\n</code></pre> <p>\u89e3\u51b3\u65b9\u6848\u51fa\u5904  \u5f53\u7136\u4e5f\u53ef\u4ee5\u9009\u62e9\u91cd\u65b0\u5f00\u4e00\u4e2apintos (\u4ee5\u4e0b\u57fa\u4e8e\u4e00\u4e2a\u65b0\u7684pintos\u6e90\u7801)  \u66f4\u597d\u7684pintos\u6307\u5bfc </p> <p>\u9700\u8981\u5728usrprog\u7684\u76ee\u5f55\u4e0b\u53bb\u91cd\u65b0\u6784\u5efa\u9879\u76ee\u5e76\u4e14\u5c06pintos\u7684loader \u548c kernel\u90fd\u91cd\u65b0\u6307\u5411\u8fd9\u4e2a\u65b0\u7684.\u6574\u4e2a\u9879\u76ee\u57fa\u4e8epintos\u7684\u6587\u4ef6\u7cfb\u7edf,\u6240\u4ee5\u8981\u65b0\u5efa\u4e00\u4e2afilesys.dsk,\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6d4b\u8bd5   </p> <pre><code>$ pintos-mkdisk filesys.dsk --filesys-size=2\n$ pintos -p ../../examples/echo -a echo -- -f -q run 'echo PKUOS'\n</code></pre> <p>\u4f46\u662f\u4f1a\u53d1\u73b0\u6700\u540e\u6267\u884c\u662fecho PKUOS\u6574\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u7a0b\u5e8f\u4e00\u8d77\u6267\u884c\u7684,\u800c\u4e0d\u662fecho,\u800cpintos\u5728\u8fd9\u91cc\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5c31\u662f\u5b8c\u6210\u6574\u4e2a\u7a0b\u5e8f\u8c03\u7528\u7684\u53c2\u6570\u5206\u79bb.  \u4e0d\u8fc7\u5728\u5b8c\u6210\u53c2\u6570\u5206\u79bb\u4e4b\u524d,\u770b\u63a5\u4e0b\u6765\u7684\u51fd\u6570:</p> <pre><code>static void\nrun_task (char **argv)\n{\n  const char *task = argv[1];\n\n  printf (\"Executing '%s':\\n\", task);\n#ifdef USERPROG\n  process_wait (process_execute (task));\n#else\n  run_test (task);\n#endif\n  printf (\"Execution of '%s' complete.\\n\", task);\n}\n</code></pre> <p>\u800cprocess_wait\u662f\u6ca1\u6709\u88ab\u5b9e\u73b0\u7684,\u76f4\u63a5\u8fd4\u56de-1,\u6574\u4e2a\u7ebf\u7a0b\u5c31\u4e0d\u4f1a\u7b49\u5f85\u5e94\u7528\u7a0b\u5e8f\u7684\u7ebf\u7a0b\u5b8c\u6210,\u5c31\u76f4\u63a5\u9000\u51fa,\u6240\u4ee5\u5728\u8fd9\u4e2a\u65f6\u5019make check\u4f1a\u51fa\u73b0\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u8f93\u51fa\u7684\u7ed3\u679c.\u6240\u4ee5\u8981\u5b9e\u73b0\u8fd9\u4e2aprocess_wait\u51fd\u6570.  \u5728\u6b64\u4e4b\u524d\u8981\u7ed9thread\u51fd\u6570\u7ef4\u62a4\u4e00\u4e2a\u5b50\u7ebf\u7a0b\u7684\u961f\u5217,\u4e5f\u5c31\u662f\u8981\u52a0\u5165  </p> <pre><code>    struct list children_list;\n    struct list_elem child_elem;\n    struct semaphore being_waited_on;\n</code></pre> <p>\u7136\u540e\u5728process_wait\u91cc\u9762\u5b9e\u73b0\u8fd9\u4e2a\u67e5\u8be2</p> <pre><code>int\nprocess_wait (tid_t child_tid) \n{\n    struct thread *child_thread = NULL;\n\n    struct list_elem *tmp;\n\n    if(list_empty(&amp;thread_current()-&gt;children_list)){\n        return -1;  //we don't have to wait so return -1\n    }\n\n    for(tmp=list_front(&amp;thread_current()-&gt;children_list);tmp!=NULL;tmp=tmp-&gt;next){\n        struct thread *t = list_entry(tmp,struct thread,child_elem);\n        if(t-&gt;tid==child_tid){\n            child_thread = t;\n            break;\n        }\n    }\n    if(child_thread==NULL){\n        return -1;\n    }\n    list_remove(&amp;child_thread-&gt;child_elem);\n\n    sema_down(&amp;child_thread-&gt;being_waited_on);\n\n    return child_thread-&gt;exit_code;\n}\n</code></pre> <p>\u8fd9\u4e2a\u5730\u65b9\u7684child_list\u7684\u5165\u961f\u662f\u5728process_execute\u51fd\u6570\u91cc\u9762\u505a\u7684 </p> <pre><code>if (tid == TID_ERROR)\n    palloc_free_page (fn_copy); \n  else{\n    current_tid = tid;\n    enum intr_level old_level = intr_disable();\n    thread_foreach(*find_tid,NULL);\n    list_push_front(&amp;thread_current()-&gt;children_list,&amp;matching_thread-&gt;child_elem);\n    intr_set_level(old_level);\n  }\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u5728thread_exit()\u4e2d\u5c06\u4fe1\u53f7\u91cfsema_up\u5c31\u5b8c\u6210\u4e86wait\u7684\u903b\u8f91. \u8fd9\u4e2a\u65f6\u5019\u7684\u6267\u884c\u7ed3\u679c\u662f\u6253\u5370\u4e86system call!  \u4e0d\u8fc7\u81f3\u5c11\u6709\u8f93\u51fa\u4e86,\u8fd8\u4e0d\u9519.   \u63a5\u4e0b\u6765\u8981\u5b9e\u73b0\u53c2\u6570\u7684\u5206\u79bb,</p>"}]}